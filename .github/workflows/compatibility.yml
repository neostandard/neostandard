name: Reusable Compatibility

on:
  workflow_call:
    inputs:
      moduleSet:
        description: 'Module set'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      moduleSet:
        description: 'Module set'
        required: true
        default: 'standard-filtered'
        type: choice
        options:
        - semistandard-filtered
        - standard-filtered
        - ts-standard-filtered

permissions:
  contents: read

jobs:
  read_repos:
    name: Read list of ${{ inputs.moduleSet || github.event.inputs.moduleSet }} repos
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: echo "matrix=$(jq -s -c '[.[].repositoryUrl | sub("https://github.com/";"";"i")] | unique | sort' dependents-data/${{ inputs.moduleSet || github.event.inputs.moduleSet }}.ndjson)" >> $GITHUB_OUTPUT

  test_external:
    needs: read_repos
    name: Test ${{ matrix.project }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node_version: [lts/*]
        project: ${{ fromJson(needs.read_repos.outputs.matrix) }}

    steps:
      - name: Checkout main project
        uses: actions/checkout@v4
        with:
          path: main

      - name: Checkout ${{ matrix.project }}
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.project }}
          path: project

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}

      - name: Determine npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('main/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: install main
        run: 'npm ci --ignore-scripts --force'
        working-directory: ./main
      - name: install project
        run: '[ -f package-lock.json ] && npm ci --ignore-scripts --force || npm install --ignore-scripts --force'
        working-directory: ./project

      - name: generate config
        run: ../main/cli.mjs --migrate ${{github.event.inputs.moduleSet == 'semistandard-filtered' && '--semi' || github.event.inputs.moduleSet == 'ts-standard-filtered' && '--ts' }} | sed "s/'neostandard'/'..\/main\/index.js'/" > eslint.config.cjs && cat eslint.config.cjs
        working-directory: ./project

      - name: run eslint
        run: ../main/node_modules/.bin/eslint -c eslint.config.cjs
        working-directory: ./project
